@page "/login"
@using BabySounds.Client.Services
@using BabySounds.Contracts.Requests
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="flex h-full w-4/5 max-w-md flex-col justify-center px-12">
    @if (_showError)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <p>@_error</p>
        </div>
    }

    <div class="mb-10 text-lg font-semibold">Please enter your credentials to proceed</div>

    <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="rounded-lg bg-white py-2">
            <div class="w-full border-b-2">
                <input id="username" class="w-full px-4 py-2 text-gray-700 outline-none" placeholder="Username" @bind="_loginModel.UserName"/>
                <ValidationMessage For="@(() => _loginModel.UserName)" class="ms-4 text-red-500"/>
            </div>
            <div>
                <input id="password" type="password" class="w-full px-4 py-2 text-gray-700 outline-none" placeholder="Password" @bind="_loginModel.Password"/>
                <ValidationMessage For="@(() => _loginModel.Password)" class="ms-4 text-red-500"/>
            </div>
        </div>

        <div class="mt-4 flex justify-between">
            <div class="flex items-center">
                <input type="checkbox" class="form-checkbox h-4 w-4 text-purple-600"/>
                <label for="agreements" class="ml-2">Remember me</label>
            </div>
            <div class="items-center">Forgot your password?</div>
        </div>

        <button type="submit" class="mt-4 w-full rounded bg-pink-900 px-6 py-4 font-semibold hover:bg-pink-950">Sing In</button>
    </EditForm>

    <a class="mt-4 rounded bg-pink-900 px-6 py-4 font-semibold hover:bg-pink-950" href="register">Don't have an account? <span class="text-blue-600">Create Account</span></a>
</div>

@code {

    private readonly LoginRequest _loginModel = new()
    {
        UserName = "",
        Password = ""
    };

    private bool _showError;
    private string? _error = "";

    private async Task HandleLogin()
    {
        _showError = false;

        var response = await AuthService.Login(_loginModel);

        response.Switch(
            _ => NavigationManager.NavigateTo("/"),
            failure =>
            {
                _error = failure.FirstOrDefault().Description;
                _showError = true;
            });
    }

}

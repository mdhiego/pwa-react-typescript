@page "/login"
@using BabySounds.Client.Services
@using BabySounds.Contracts.Requests
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Login</h1>

@if (_showError)
{
    <div class="bg-red-500 text-white px-4 py-2 rounded-md" role="alert">
        <p>@_error</p>
    </div>
}

<div class="flex justify-center items-center h-screen">
    <div class="bg-white shadow-lg rounded-lg p-6">
        <h5 class="text-lg font-semibold mb-4">Please enter your details</h5>
        <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="mt-8">
                <InputText Id="username" class="form-input mt-1 block w-full" @bind-Value="_loginModel.UserName" placeholder="Username"/>
                <ValidationMessage For="@(() => _loginModel.UserName)" class="text-red-500"/>
            </div>
            <div class="mb-4">
                <label for="password" class="block mb-1">Password</label>
                <InputText Id="password" type="password" Class="form-input" @bind-Value="_loginModel.Password"/>
                <ValidationMessage For="@(() => _loginModel.Password)" class="text-red-500 mt-1"/>
            </div>
            <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded"
                    style="background-color: #4D0039;">
                Submit
            </button>
        </EditForm>
    </div>
</div>


@code {

    private readonly LoginRequest _loginModel = new()
    {
        UserName = "",
        Password = ""
    };

    private bool _showError;
    private string? _error = "";

    private async Task HandleLogin()
    {
        _showError = false;

        var response = await AuthService.Login(_loginModel);

        response.Switch(
            _ => NavigationManager.NavigateTo("/"),
            failure =>
            {
                _error = failure.FirstOrDefault().Description;
                _showError = true;
            });
    }

}
